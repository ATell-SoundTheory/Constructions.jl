var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Constructions\nConstructions.Construction\nConstructions.ConstructionsError\nConstructions.dependency_order\nConstructions.getindex\nConstructions.place_element!\nConstructions.construct_element!\nConstructions.modify_placed_element!\nConstructions.remove_element!\nConstructions.replace_element!\nConstructions.@place\nConstructions.@construct\nConstructions.@modify\nConstructions.@remove\nConstructions.@replace","category":"page"},{"location":"api/#Constructions","page":"API","title":"Constructions","text":"    Constructions\n\nMinimal dependency-graph framework for named constructions.\n\nCore concepts\n\nConstruction: container of named elements (strings) mapped to either\nPlacedElement: concrete values provided by the user\nConstructedElement: values produced by a rule (function) with dependencies\n\nUpdating\n\nChanging a placed element triggers recomputation of all downstream constructed elements   in a safe topological order.\nRemoving an element cascades removal of dependents.\nCycles in dependencies are detected and reported via ConstructionsError.\n\nAccess and ergonomics\n\nAccess a value by name with C[\"S\"].\nMacros provide a concise DSL: @place, @construct, @modify, @replace, @remove.\n\nError behavior\n\nDuplicate names: ArgumentError\nUnknown dependencies/names: ArgumentError\nFailed construction rule: ArgumentError (on creation) or ConstructionsError (on update)\nCycles: ConstructionsError\n\n\n\n\n\n","category":"module"},{"location":"api/#Constructions.Construction","page":"API","title":"Constructions.Construction","text":"Construction()\n\nContainer mapping names (String) to elements and providing dependency-aware updates and access.\n\n\n\n\n\n","category":"type"},{"location":"api/#Constructions.ConstructionsError","page":"API","title":"Constructions.ConstructionsError","text":"ConstructionsError(msg)\n\nCustom exception type raised for construction-graph runtime errors like cycles or stalled updates during recomputation.\n\n\n\n\n\n","category":"type"},{"location":"api/#Constructions.dependency_order","page":"API","title":"Constructions.dependency_order","text":"dependency_order(C::Construction) -> Vector{String}\n\nReturn a topological ordering of element names such that all dependencies precede their dependents. Throws ConstructionsError if a dependency cycle exists.\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.getindex","page":"API","title":"Base.getindex","text":"C[ename::String]\n\nReturn the representation bound to the given name, or throw ArgumentError if no such element exists.\n\n\n\n\n\n","category":"function"},{"location":"api/#Constructions.place_element!","page":"API","title":"Constructions.place_element!","text":"place_element!(C, ename::String, value) -> nothing\n\nInsert a new placed element named ename with the given value. Throws ArgumentError if ename already exists.\n\n\n\n\n\n","category":"function"},{"location":"api/#Constructions.construct_element!","page":"API","title":"Constructions.construct_element!","text":"construct_element!(C, ename::String, rule::Function, deps::Set{String}) -> nothing\n\nInsert a new constructed element named ename, produced by rule(C) and depending on deps. Throws ArgumentError for duplicate names or unknown deps. If rule(C) throws, the creation fails with ArgumentError.\n\n\n\n\n\n","category":"function"},{"location":"api/#Constructions.modify_placed_element!","page":"API","title":"Constructions.modify_placed_element!","text":"modify_placed_element!(C, ename::String, newvalue) -> nothing\n\nChange the value of a placed element and trigger recomputation downstream. Throws ArgumentError if ename is not found or is a constructed element.\n\n\n\n\n\n","category":"function"},{"location":"api/#Constructions.remove_element!","page":"API","title":"Constructions.remove_element!","text":"remove_element!(C, ename::String) -> nothing\n\nRemove an element and recursively remove all of its dependents. Throws ArgumentError if the name is not found.\n\n\n\n\n\n","category":"function"},{"location":"api/#Constructions.replace_element!","page":"API","title":"Constructions.replace_element!","text":"replace_element!(C, ename::String, value) -> nothing\n\nReplace an element by a placed element with the given value, preserving its dependents and triggering recomputation downstream.\n\n\n\n\n\nreplace_element!(C, ename::String, rule::Function, deps::Set{String}) -> nothing\n\nReplace an element by a constructed element produced by rule(C) depending on deps, preserving its dependents and triggering recomputation. Throws ArgumentError for unknown deps or if rule(C) throws.\n\n\n\n\n\n","category":"function"},{"location":"api/#Constructions.@place","page":"API","title":"Constructions.@place","text":"@place C name value\n\nInsert a placed element and return its value. Example: @place C \"A\" 42.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Constructions.@construct","page":"API","title":"Constructions.@construct","text":"@construct(C, name, rule, deps...)\n\nInsert a constructed element produced by rule applied to the values of deps. Returns the element's value. Example: @construct(C, \"S\", +, \"A\", \"B\") defines S = C[\"A\"] + C[\"B\"].\n\n\n\n\n\n","category":"macro"},{"location":"api/#Constructions.@modify","page":"API","title":"Constructions.@modify","text":"@modify C name newvalue\n\nModify a placed element and return its new value. Example: @modify C \"A\" 7.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Constructions.@remove","page":"API","title":"Constructions.@remove","text":"@remove C name\n\nRemove an element and all of its dependents. Example: @remove C \"A\".\n\n\n\n\n\n","category":"macro"},{"location":"api/#Constructions.@replace","page":"API","title":"Constructions.@replace","text":"@replace C name value\n\nReplace an element with a placed element holding value. Returns that value.\n\n\n\n\n\n@replace(C, name, rule, deps...)\n\nReplace an element with a constructed element produced by rule applied to the values of deps. Returns the new value.\n\n\n\n\n\n","category":"macro"},{"location":"interactive/#Interactivity-options","page":"Interactivity","title":"Interactivity options","text":"","category":"section"},{"location":"interactive/","page":"Interactivity","title":"Interactivity","text":"Want to see how constructions react when you move inputs? Here are a few lightweight options you can pick from, depending on your workflow.","category":"page"},{"location":"interactive/#Makie.jl-(sliders,-native-or-web)","page":"Interactivity","title":"Makie.jl (sliders, native or web)","text":"","category":"section"},{"location":"interactive/","page":"Interactivity","title":"Interactivity","text":"Makie makes it easy to bind geometry to reactive Observables and add sliders/draggers. A minimal example is provided in examples/interactive_triangle_makie.jl:","category":"page"},{"location":"interactive/","page":"Interactivity","title":"Interactivity","text":"Move vertex C with sliders and watch midpoints, centroid, and the circumcircle update.\nRun it with GLMakie (native window) or WGLMakie (browser-based):\nNative: using GLMakie; include(\"examples/interactive_triangle_makie.jl\")\nWeb: using WGLMakie; WGLMakie.activate!(); include(\"examples/interactive_triangle_makie.jl\")\nYou can save a self-contained HTML via WGLMakie: save(\"interactive_triangle.html\", fig).","category":"page"},{"location":"interactive/#Pluto.jl-notebooks","page":"Interactivity","title":"Pluto.jl notebooks","text":"","category":"section"},{"location":"interactive/","page":"Interactivity","title":"Interactivity","text":"Pluto gives you reactive cells and sliders (PlutoUI.jl) with no callbacks. A Pluto version mirrors the same triangle example:","category":"page"},{"location":"interactive/","page":"Interactivity","title":"Interactivity","text":"Create a new notebook and add cells for the points A, B, C, derived midpoints and centroid, and a plotting cell.\nUse @bind with Slider(…) to change coordinates live and re-render the figure.\nTip: keep geometry pure (return NamedTuples or plain numbers) and plot from a final cell.","category":"page"},{"location":"interactive/#Constructions.jl-Makie-draggers","page":"Interactivity","title":"Constructions.jl + Makie draggers","text":"","category":"section"},{"location":"interactive/","page":"Interactivity","title":"Interactivity","text":"For richer scenes, wire Constructions.jl into Makie’s draggers:","category":"page"},{"location":"interactive/","page":"Interactivity","title":"Interactivity","text":"Keep a Construction instance in scope and call @modify when draggers move the placed points.\nRecompute derived elements automatically thanks to Constructions’ dependency graph.\nPlot either via Plots.jl or Makie (the provided interactive demo uses raw Euclidean math for simplicity, but the same idea applies with your PGA2D helpers).","category":"page"},{"location":"interactive/#Tips","page":"Interactivity","title":"Tips","text":"","category":"section"},{"location":"interactive/","page":"Interactivity","title":"Interactivity","text":"Determinism in docs: the main docs are kept deterministic (SVG/APNG). Interactivity is offered as external examples or exported HTML with WGLMakie.\nPerformance: keep geometry small per frame; cache static elements; use Observables for reactive dependencies.\nCross-platform: GLMakie works natively; WGLMakie runs in the browser (great for sharing).","category":"page"},{"location":"quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"CurrentModule = Constructions","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"This page shows the basics of defining a construction, placing elements, and creating dependencies.","category":"page"},{"location":"quickstart/#Basic-usage","page":"Quickstart","title":"Basic usage","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> using Constructions\n\njulia> C = Constructions.Construction()\nConstructions.Construction(Dict{String, Constructions.AbstractGeometricElement}())\n\njulia> @place C \"A\" 1\n1\n\njulia> @place C \"B\" 2\n2\n\njulia> @construct C \"S\" + \"A\" \"B\"   # defines S = A + B\n3\n\njulia> C[\"S\"]\n3\n\njulia> @modify C \"A\" 10  # propagates to S\n10\n\njulia> C[\"S\"]\n12","category":"page"},{"location":"quickstart/#Replacement-and-removal","page":"Quickstart","title":"Replacement and removal","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> @replace C \"S\" * \"A\" \"B\"  # new rule S = A*B\n20\n\njulia> @remove C \"B\"\n\njulia> C[\"S\"]  # removed because it depended on B\nERROR: ArgumentError: Element S not found.","category":"page"},{"location":"quickstart/#Plotting-(optional)","page":"Quickstart","title":"Plotting (optional)","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"If Plots.jl is available, a recipe is provided via the ConstructionsPlotsExt extension. Load Plots before plotting:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using Plots\nplot(C)","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"The plotting extension loads automatically on Julia ≥ 1.9 when Plots is in the environment.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Constructions","category":"page"},{"location":"#Constructions","page":"Home","title":"Constructions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Constructions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Quickstart and API pages for usage and reference.","category":"page"},{"location":"demo/#Demo:-Triangle-Construction","page":"Demo","title":"Demo: Triangle Construction","text":"","category":"section"},{"location":"demo/","page":"Demo","title":"Demo","text":"This page shows a small example using Constructions.jl to build a triangle, its midpoints, centroid, and (if non-degenerate) the circumcircle. Plotting is optional via Plots.jl.","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Rendered figure (SVG, built during docs):","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"(Image: )","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Animation (APNG):","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"(Image: triangle animation)","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"using Constructions\nusing Plots\n\npoint(x, y) = (x = float(x), y = float(y))\nmidpoint(P, Q) = point((P.x + Q.x) / 2, (P.y + Q.y) / 2)\n\nfunction circumcenter(A, B, C)\n    ax, ay = A.x, A.y\n    bx, by = B.x, B.y\n    cx, cy = C.x, C.y\n    d = 2 * (ax * (by - cy) + bx * (cy - ay) + cx * (ay - by))\n    iszero(d) && return nothing\n    ux = ((ax^2 + ay^2) * (by - cy) + (bx^2 + by^2) * (cy - ay) + (cx^2 + cy^2) * (ay - by)) / d\n    uy = ((ax^2 + ay^2) * (cx - bx) + (bx^2 + by^2) * (ax - cx) + (cx^2 + cy^2) * (bx - ax)) / d\n    O = point(ux, uy)\n    r = hypot(O.x - ax, O.y - ay)\n    (center = O, radius = r)\nend\n\nC = Construction()\n@place C \"A\" point(-1.0, 0.2)\n@place C \"B\" point(1.0, 0.0)\n@place C \"C\" point(0.0, 1.2)\n\n@construct(C, \"M_ab\", midpoint, \"A\", \"B\")\n@construct(C, \"M_bc\", midpoint, \"B\", \"C\")\n@construct(C, \"M_ca\", midpoint, \"C\", \"A\")\n@construct(C, \"G\", (A,B,C) -> point((A.x+B.x+C.x)/3, (A.y+B.y+C.y)/3), \"A\", \"B\", \"C\")\n@construct(C, \"circ\", circumcenter, \"A\", \"B\", \"C\")\n\n# See examples/triangle_construction.jl for a full plotting version.","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"For animation, see examples/triangle_animation.jl. It updates C[\"C\"] over time using @modify and records frames with Plots’ @animate.","category":"page"},{"location":"demo/#Same-idea,-simpler-with-PGA2D","page":"Demo","title":"Same idea, simpler with PGA2D","text":"","category":"section"},{"location":"demo/","page":"Demo","title":"Demo","text":"If you have PGA2D available, the geometric helpers are already provided, so the construction code becomes smaller. Below is a sketch (not executed in docs for determinism):","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"using Constructions\nusing PGA2D  # provides point(), incenter_ppp, circumcircle_ppp, etc.\nusing Plots  # optional, for visualization\n\nC = Construction()\n@place C \"A\" point(-1.0, 0.2)\n@place C \"B\" point( 1.0, 0.0)\n@place C \"C\" point( 0.0, 1.2)\n\n# Triangle centers and circles via PGA2D helpers\n@construct(C, \"I\", incenter_ppp,     \"A\", \"B\", \"C\")          # incenter (point)\n@construct(C, \"circ\", circumcircle_ppp, \"A\", \"B\", \"C\")        # NamedTuple (center, radius)\n\n# Example visualization (requires PGA2D plotting extension to be loaded)\n# scatter!(C[\"A\"], C[\"B\"], C[\"C\"]; label=\"A,B,C\")\n# let cc = C[\"circ\"]; cc !== nothing && plot!(cc) end","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"You can animate similarly by updating the placed point \"C\" in a loop via @modify C \"C\" point(x(t), y(t)). All dependent elements (incenter, circumcircle) update automatically.","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"See also:","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"examples/triangle_construction_pga2d.jl\nexamples/triangle_animation_pga2d.jl","category":"page"},{"location":"demo/#CAD-style-example:-Filleted-rectangle","page":"Demo","title":"CAD-style example: Filleted rectangle","text":"","category":"section"},{"location":"demo/","page":"Demo","title":"Demo","text":"This example mimics a common 2D CAD operation: filleting rectangle corners with a radius r. It shows how driving dimensions (w, h, r, center) propagate through dependent geometry.","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"(Image: fillet rectangle)","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Animated (APNG):","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"(Image: fillet rectangle animation)","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Try the full examples:","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"examples/cad_fillet_rectangle.jl\nexamples/cad_fillet_rectangle_animation.apng.jl","category":"page"},{"location":"demo/#Triangle-symmedians-(Lemoine-point)","page":"Demo","title":"Triangle symmedians (Lemoine point)","text":"","category":"section"},{"location":"demo/","page":"Demo","title":"Demo","text":"A classic olympiad-grade construction: the three symmedians of a triangle are concurrent at the Lemoine point K. One way to obtain symmedians is via isogonal conjugation of the medians (reflect each median across the corresponding internal angle bisector).","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Below is a PGA2D-based example (not executed in docs for determinism). The full plotting version is available under examples/triangle_symmedians_pga2d.jl.","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"using Constructions\nusing PGA2D\n\nC = Construction()\n@place C \"A\" point(-1.1, 0.2)\n@place C \"B\" point( 1.2, 0.0)\n@place C \"C\" point( 0.0, 1.3)\n\n# Lemoine point K via barycentric weights a^2:b^2:c^2\n# (See full example for details and plotting.)","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Rendered figure (SVG, built during docs):","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"(Image: )","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"See also the full script:","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"examples/triangle_symmedians_pga2d.jl","category":"page"},{"location":"demo/#Euler-line-and-Nine-point-circle","page":"Demo","title":"Euler line and Nine-point circle","text":"","category":"section"},{"location":"demo/","page":"Demo","title":"Demo","text":"Another classic: O (circumcenter), H (orthocenter), and G (centroid) are collinear on the Euler line, with NG = GO = GH/2. The Nine-point circle has center N (midpoint of O and H) and radius half the circumradius.","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Rendered figure (SVG, built during docs):","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"(Image: )","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Full PGA2D example with plotting:","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"examples/triangle_ninepoint_euler_pga2d.jl","category":"page"},{"location":"demo/#Simson-line","page":"Demo","title":"Simson line","text":"","category":"section"},{"location":"demo/","page":"Demo","title":"Demo","text":"For any point P on the circumcircle, the feet of the perpendiculars from P to the sides of the triangle are collinear (the Simson line).","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Rendered figure (SVG, built during docs):","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"(Image: )","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Full PGA2D example with plotting:","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"examples/triangle_simson_line_pga2d.jl","category":"page"},{"location":"demo/#Miquel-point","page":"Demo","title":"Miquel point","text":"","category":"section"},{"location":"demo/","page":"Demo","title":"Demo","text":"Given triangle ABC and points D, E, F chosen on sides BC, CA, AB (not at the vertices), the circumcircles of triangles (A,E,F), (B,F,D), and (C,D,E) concur at a single point: the Miquel point.","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Rendered figure (SVG, built during docs):","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"(Image: )","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Full PGA2D example with plotting:","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"examples/triangle_miquel_pga2d.jl","category":"page"},{"location":"demo/#Brocard-points","page":"Demo","title":"Brocard points","text":"","category":"section"},{"location":"demo/","page":"Demo","title":"Demo","text":"The Brocard points Ω1 and Ω2 have trilinears Ω1 = (c/b : a/c : b/a) and Ω2 = (b/c : c/a : a/b). They satisfy remarkable equal-angle properties at the triangle’s vertices.","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Rendered figure (SVG, built during docs):","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"(Image: )","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Full PGA2D example:","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"examples/triangle_brocard_pga2d.jl","category":"page"},{"location":"demo/#Apollonius-circles","page":"Demo","title":"Apollonius circles","text":"","category":"section"},{"location":"demo/","page":"Demo","title":"Demo","text":"For a ratio k > 0, the locus of points X with XB:XC = k is a circle (Apollonius circle). Each vertex yields a family of such circles.","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Rendered figure (SVG, built during docs):","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"(Image: )","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Full PGA2D example:","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"examples/triangle_apollonius_pga2d.jl","category":"page"},{"location":"demo/#Orthic-triangle-and-nine-point-circle","page":"Demo","title":"Orthic triangle and nine-point circle","text":"","category":"section"},{"location":"demo/","page":"Demo","title":"Demo","text":"The feet of the altitudes form the orthic triangle. The nine-point circle has radius half the circumradius and center at the midpoint of the circumcenter and orthocenter.","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Rendered figure (SVG, built during docs):","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"(Image: )","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"Full PGA2D example:","category":"page"},{"location":"demo/","page":"Demo","title":"Demo","text":"examples/triangle_orthic_pga2d.jl","category":"page"}]
}
